import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitStackQueue {

	@Test
	public void test() {
		int driverSelection = 1;
		int op = 7;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test1() {
		int driverSelection = 0;
		int op = 7;
		int input = 6184542;

		int[] arrStack = {1583242846, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 1583242846, 1583242846, 1583242846, 1583271887, -815899042, 1583242846, 1583242846, 1583242846, 1583242846, 1581866590, 1583242846, 1583242846, 1581080158, 1583242846, 1583242846, 1583242846, 1582915166, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1578131038, 1583240286, 1583242846, 1583636062, 1583242846, 1583242846, 1583242846, 1583242846, 1577723430, 640034342, 640034342, 640035366, 640034342, 640034342, 640034342, 640034342, 640034343, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640427558, 640034342, 640031782, -1684301018, 640034342, 640034342};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test2() {
		int driverSelection = 1;
		int op = 8;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 2053005051, 1583242846, 1593663070, 1583242846, 1583243004, 1583242846, 1583242752, 16777020, -535822242, 1584160350, 1398693436, 2147427878, 175930490, 2088533116, 2088533116, 2088664158, 1583242846, 1584094844, 589702733, 640034431, 640034342, 640034342, 1059464742, 640034559, -8388826, 405153318, 640028966, 640034342, 639836966, 640034342, 640034398, 1583222822, -2144983514, 640034355, 639836963, 589702694, 640034342, 643718750, 1583228480, 640034342, 640034342, 639641126, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034364, 2097151868, -1837335428, 2088533116, 2088533116, 2088533116, 2088696444, 2080375296, 8158332, 2088533116, -1937998724, 2084732028, 2088533116, 640034304, 539173667, 595525683, 589505315, 592651043, 590029603, 589552163, 589505315, 589505315, 589505315, 52896547, 589498915};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(75, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test3() {
		int driverSelection = 2;
		int op = 4;
		int input = 1583242846;

		int[] arrStack = {638920230, 321267266, 640034559, -14277082, 640034314, 2082700326, 640034342, 639836963, 2088533027, 1142299939, 589505315, 589505315, 603914240, 640041491, 640090111, 914093091, 589505315, 595360892, 591664669, 589505315, 589505315, 589561600, 6425, 421100672, 2088526972, 2088533116, 2082677539, 589505304, 589505315, 589505315, 2302755, 170074915};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, -8454144, 1583242790, 640033300, 640034304, 554958886, 643703316, 640056444, 2086370428, -2147477223, 435059836, 2088664188, 2088533116, 2088533116, 637544212, 2500134, 640040230, 640034342, 640034342, 640034342, 640034342, 640040742, 640034342, 640034342, 640034342, 640034342, 640034345, 1701127718, 119940646, 640034370, 321267455, -181, 1263225675, 1263225675, 1263225675, 1263225675, 1263225675, 1263225675, 1263225855, -2144983428, 2088533116, 170074915, 589505404, 2088510243, 589112188, 2088533116, 2083071563, -1404351669, 1263225675, 1263225675, 1263229771, 1263225675, 1263225675, 1701143909, 1701143909, 1702913381, 1701143909, 1701143909, 1701143909, 1701137227, 640034342, 321266467, 589505297, 593765244, 2088511014, 640034342, 640034342, 640034432, 1644825, -293831556, 2122087548, 2088533116, 2088533030, 640034342, 640041491, 640090111, 646318627, 589528099, 1142299939, 589505315, 589505315, 603914240, 640041510};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(52568611, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test4() {
		int driverSelection = 1;
		int op = 5;
		int input = 2019450462;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1585216547, 589505315, 589505374, -564245410, 1583242846, 1583242846, 1583242846, -1352769961, 1583251806, 589505315, 589505455, 589505331, 589510238, 255, 1583242846, 1583242846, 1583251294, 1583242822, 1583242752, -10592674, -402432418};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(995711232, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test5() {
		int driverSelection = 2;
		int op = 2;
		int input = 1583242768;

		int[] arrStack = {640689664, 19277350, 640034339, 645692542, 2088533027, 589505315, 589505315, 589561855, -8436982, 640034316, 640034334, 637534246, 639575590, 645692540, 2080379004, 2054978684, -1753449348, 2088533116, 2088533116};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1579558438, -32768, 640034342, 640034342, 640034342, 2503203, 593387102, 1583242846, 1582587478, 1448498774, 1448477270, 1583240798, 1583236446, 1583242880, 1583242846, 1583242846, 640034342, 640034342, 640076237, 1867907072, 192894550, 1449025110, -657601242, 640034342, 640034342, 1176905281, 640034342, 640034342, 640034342, 907028006, 640034342, 640034342, 32767, 640034342, 640034342, 640034342, 640034315, 640034342, 640034333, 637543986, 589505315, 589505315, 606282519, 589505323, -1, 589505315, 589505318, 640034342, 641869350, 640034342, 640034342, 640034342, 640034428, 2088533116, 2088533116, 2088533147, 2088532145, 2088533116, 2088533116, 2088533107, 2088516732, 2092006524, 2088533116, 2088533116, 2087943292, 640034470, 103155494, 640034314, 2088505468, 1013349500, 2088533116, 2088533092, 2088533116, 2088533116, 2088533030};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test6() {
		int driverSelection = 1;
		int op = 0;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(1583242846,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());
		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test7() {
		int driverSelection = 1;
		int op = 1;
		int input = 1149009020;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {639836963, 589505315, 593387024, -1822532002, -1, 1583242846, -808464433, 2088533081, -1787003780, 2088533116, 1583242846, 274620026, 1582718558, 2088533116, 2088533116, 2088533116, 2088795391, -8388484, 33586300, 2088533116, 1579559974, 640073663, -1077949761, -1077952577, -1077952577, 640035622, 640034342, 640034342, 645661194, 640034342, 589504291, 603930623, -14474461, 589505318, 640034319, -33546979, 494937724, 2088533116, 2086559249, 1585216636, 33586300, -1395666993, 170272294, 639836963, 589505457, -808464433, 2088533083, 2088533116, 2088533116, 2088510243, 1663247139, 589505315, 595355516, 2088533116, 2088533116, 2088313777, -808464433, 2088533083, 2088533116, 2088510276, 589561728, 2088533116, 2088533116, 2088531580, 2088533116, 2088533116, 2088533116, 2089385084, 2088537480, 2089581590, 593362944, 589505315};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);
		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test8() {
		int driverSelection = 0;
		int op = 4;
		int input = 1583242846;

		int[] arrStack = {1583242846, 1583242871, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583227683, 589505315, 589505315, 589505315, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583251294, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640048734, 1581342298, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242762, 640034342, 640034342, 640034342, 640025600, 640034342, 640034342, 640034342, 640034342, 640034342, 644228646, 640034342, 640034342, 640034342, 640034342, 640034342, 640034310, 640034342, 640034342, 640034342, 638592547, 589505315, 589505315, 589507875, 589505315, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034314};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1280068656, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test9() {
		int driverSelection = 0;
		int op = 3;
		int input = 1583244894;

		int[] arrStack = {2085837918, 1432233510, 640033571, 589505315, 656614179, 589505333, 589505315, -1071439069, 589505404, 643718750, 1583242846, 1904213854, 1583242846, -2141299106, 1661035512, -117901064, 1583242846, 1583242849, 1583242846, 1583242846, 1298013790, 1584949367, 1583242869, 1583249246, 1583242846, 1583242846, 1583222878, 1583242853, 1734222627, 589505315, 589520478, -2147483648, 640034319, 640034342, 640057126, 640034342, 640034342, 640034342, 640050214, 640034342, 640038182, 656811558, 640056444, 2088533030, 640036156, 338044454, 640034342, 640034342, 640034342, 637535360, 270935590, 270935590, 640034342, 640034432, -14277070, 640039462, 640034342, 639836963, 589505315, 587333670, 648160806, 507717170, 640039206, 640034342, 640034431, -14277082, 646850221, 841360906, 1870332159};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test10() {
		int driverSelection = 2;
		int op = 5;
		int input = 589505315;

		int[] arrStack = {1583242846, 1583242846, 1583242846, 1583242846, 640034342, 640034342, 637558366, 1079926366, 1583242846, 170272294, 640041766, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {589505315, 593387102, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(50529027, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test11() {
		int driverSelection = 0;
		int op = 2;
		int input = 1583242846;

		int[] arrStack = {-842150451, -842150451, -842150451, -842150451, -842150451, -842150618, 638976000, -465557978, 640024832, 1583242846, 1583242846, 1583242869, 16, 1583245406, 1583242846, 1583242846, 1583242855, 1583227683, 589505468, 590546467, 587211555, 589505383, 589505333, 589505326, 589505315, 589505306, 589505315, 589505315, 587211555, 1677730595, 589520478, 1583242846, 1583242846, 1583242846, 1583242846, 1583242823, 1197366878, 1583242846, 1583242846, 1968449062, 640034342, 640034342, 640024703, 587202562, 2302755, 589505315, 589496320, 9766, 136717862, 640034342, 640034361, 539371560, 1093150775, 673588774, 942024230, 640034353, 640027260, 2088533116, 2088533116, 2088533116, 2088533100, 2081717280, 285179004, 2087222396, 2088533116, 2088524299, 2080406652, 2088533116, 162940, 1820075555, 589505315, 891495203, 513352483, 589505331, 589512483};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(38, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test12() {
		int driverSelection = 2;
		int op = 3;
		int input = 1579361059;

		int[] arrStack = {1820097660, 2088533116, 2088532993, 124, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2081048099, 589505315, 824386339, 589505315, 587277091, 589505315, 640034339, 589505315, -402447581, 589500963, 589505315, 589529123, 589505315, 589505315, 589505315, 589505315, 589512995, 589505315, 589528188, -1937998724, 1770093692, 2088533116, 2088533116, 2088533116, 589505315, 589505315, 589505315, 589505280, 2133009187, 589505315, 589505315, 589505315, 589505315, 593699619, 589505315, 589505290};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, -41378, 1583242846, 1583242846, 1583242846, 1583242846, 1583779166, 1583242846, 1583242846, 1667128926, 1834901086, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 2120113758, 1577058304, 1079926366, 1583242846, 1583242752, 73293406, 1583242846, 1581866590, 1577058342, 640034342, 589505318, 640034342, 640034342, 640024576, 640034342, 640034342, 639827968, 75302, 262144, 891692582, 640028672, 638854694, 640034342, 639827968, 75302, 262144, 891692582, 640034342, 640034342, 640034342, 640886310, 640034342, 640034342, 640034342, 640034342, 638920230, 640034342, 237397030, 640034342, 656811558, 640034342, 640034342, 640034342, 640034342, 539371046, 640034342, 645692540, 2004318071, 2003269495, 2004318071, 2004318076, 2088533116, 2088533116, 2088533116, 2088533097, -2122548100, 2088533116, -1770226564};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test13() {
		int driverSelection = 1;
		int op = 2;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1952341598, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583264862, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 639641126, 640034342, 640034342, 640034342, 641541670, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640037158, 640034342, 641017382, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 175930492, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test14() {
		int driverSelection = 2;
		int op = 0;
		int input = -65442;

		int[] arrStack = {2088533116, 640050720, 2088533116, 2088566655, 31868, 2088533116, 2088533119, -8650736, 2088533116, 1920760956, -1837335428, 2088533116, 170074915, 992158502, 589505408, 2302755, 589505315, 589505315, 589505315, 589505315, 593387102, 1583242846, 1583264862, 1583242846, 1583242846, -1195853789, 589505315, 589505315, 268444451, 589513507, 593387102, 1583242846, 1583245406, 1583242846, 1583242846, 2120113758, 1583242787, 589439011, 589504035, 603979775, -14474241, -221, 589506086, 640034342, 1713775395, 589505315, 1680024355, 594092835, 589505315, 589504035, 589505315, 590160675, -1785358955, -1785359069, 589505315, 589505827, 589505315, 589506086, 640024576, 6563366, 640034342, 640034342, 640034342, 640034342, 640034342, 639836942, 589505290};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-1195853640, -1195853640, -1198457088, -83886209, -10592768, 1048670, 1583244894, 1583242846, 2088533082, 2080406652, 2088501504, 2080406652, 1593835519, -2141299106, 1583242846, 1583242816, 1584815713, 1583242846, 1577074236, 1585216636, 2088510302, 1583242762, 640034342, 638451712, 32646694, 654311295, -8618889, 2088533119, -1988330372, 2081423484, 8158332, 2088533116, 8158246, 640034352, 640034342, 640034342, 640034342, 1713776349, -40154, 640034342, 858138150, 640034342, 640034342, 640034342, 640047420, 643114534, -400153059, 640034342, 640032807, 640034342, 405153318, 640067110, 654311206, 640034342, 203826700, 640034342, 640034342, 1109796390, 639575590, 641613898, 354821670, 640028710, 640034342, 1042680444, 2088538236, 2088533116, 2088533116, -1820558301, 589505315, 639836963, -2147451780, 2087550076, 2088598652, 2088533247, -2146403204};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-606348350, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test15() {
		int driverSelection = 1;
		int op = 3;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1130258014, 1583242846, 1583242768, 6184542, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1584356958, 1583235934, 1583242846, 1583242846, 1583046238, 1583242846, 1583242846, 1583242846, 1583244382, 1579558438, 640034342, 220603907, 640034342, 640034342, 639641126, 640034342, 640034385, 1364283729, 1062293841, 1364272678, 640034342, 640034308, 2533414, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640050176, 9766, 640034342, 270935590, 640034342, 640030246, 640034342, 640036390, 639705891, 589299747, 589505315, 1073741824, 640034342, 640026150, 640034342, 640038694, 640034342, 606283302, 640027260, 2089843836, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088008828, 2088533120, 2088533116, 2088533116, -1736672132, -1787003780, 2088534140, 2088539004, 2088533116, 2088533116, 2086763644, 2088533116, 2082677624, 2087812220, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533088, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test16() {
		int driverSelection = 1;
		int op = 3;
		int input = 1577059328;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242590, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, -631349666, 1577723430, 640034342, 640027686, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034086, 640034342, 640034342, 639510054, 640034342, 175930492, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test17() {
		int driverSelection = 0;
		int op = 3;
		int input = 1583242846;

		int[] arrStack = {29278, 1600020062, 1583242846, 1583251342, 2086559348, 1581145694, 1583242846, 1583250504, 1581997662, 1583240798, 1583242846, 1583242846, 1583242846, 2053004894, 1583242846, 1583242846, 1583242846, 1583243007, 1577723430, 640034342, 645867046, 254189600, -1600085856, -2036293472, -1600117981, 589505315, 589512995, 589505315, 589702691, 640034304, 65574, 640034342, 640034598, 640034559, 589505315, 589505315, 153297699, 2088533116, 2088533116, 2088533116, 2088533030, 640034342, 640056444, 2088533102, 2087287932, 2088533247, 2088533116, 2088533116, 2088533116, 2088467580, 2088511014, 589505315, 587235584, 438510371, 589702683, 455475238};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test18() {
		int driverSelection = 1;
		int op = 6;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583244638, 1583242846, 1583242846, 1583235678, 1583242846, 1147035230, 1583242846, 1583242846, 1583242905, -1717986978, 1583230808, 1577066534, 640028710, 1027999231, -16384001, -41378, 1583280639, 24158, 874915366, 1583242846, 1583242846, 1583242818, 1583242790, 640090111, -14221313, -55684, 2088533116, 2088570240, 2147483647, 640033574, 640049702, 640024577, 9852, 8158332, 0, 1507328};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test19() {
		int driverSelection = 0;
		int op = 8;
		int input = 1683906142;

		int[] arrStack = {640034342, 640027939, 589505315, 589505321, 589506086, 640034342, 640034342, 640034342, 1583235166, 1584291422};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(10, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test20() {
		int driverSelection = 1;
		int op = 2;
		int input = 1583226880;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242849, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583248222, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034354, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test21() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {1583242846, 1583226462, 1583242846, 1583242838, 1583636082, 1583230558, 1583238750, 1583242846, 1583242846, -1751672937, -1751672937, -1751672974, 1583245918, 1585012318, 1583242846, 1583242846, 1583242846, 1314807390, 1583242816, 1583242846, 1784569438, 1585252902, 640034342, 320017171, 320017171, 321267238, 640056441, 640034342, 640034342, 421930534, 640033571, 539173667, 603979711, 2133009187, 1680034086, 640034342, 536838182, 640034342, 640027942, 640034342, 640034342, 640033318, 640034342, 640034342, 640034342, 640034342, 640034342, 640042022, 640034577, 640034342, 640024592, 640034342, 640034342, 642262557, 640034342, 1719434364, 1768515945, 1246718313, 1768515945, 2088533116, 2088533116, 2088530812, 2088530812, 2080400508, 2088533116, 2088436712, 2088529020, 2088533116, 2090695804, 2088540569, -1717986919, -1721144983, 1768528793, -1717986919, -1717790311};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test22() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1633574494, -65536, 1583246942, 1583242058, 1583242880, 6184542, 1583570526, 1583243007, -8388514};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1633508958, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test23() {
		int driverSelection = 0;
		int op = 0;
		int input = 1583242834;

		int[] arrStack = {1583242846, 1583242846, 1583242846, 1583242846, 1583242879, 16772446, 1583242846, 1583242820, 1583242846, 1583242846, 1583250556, 2088533116, -58979805, 589505315, 589505315, 237183779, 589505315, 589506339, 589702694, 640034342, 641017382, 640048734, 1583242846, 1583242846, 1583228480, 638527103, -349821402, 640033571, 593765375, 589505315, 1126376227, 589506086, -2044311770, 640034342, 640041222, 640034342, 640034342, 640034320, 637937190, 640034342, 640027152, 8158364, 2088533116, 2088533027, 589496576, 589528867, 2081193072, 2088533116};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1583242834,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test24() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {640034428, 2088533027, 589508098, 589505389, 1835273984, 7171437};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583243007, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1581145694, 1583241054, 1583242812, 1585208926, 1583242846, 1583241822, 1583242750, 639903270, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640087334, 639836963, 640034342, 640034086, 640034342, 640034342, 640034354, 640034342, 640034342, 652739328, 2522236, 2088533116, 2083333670, 640034342, 640090111, -16744193, -8618872, 2088533116, 2089647228, 2088533116, 2088529022, 2088541820, 31745, 8150908, 2088527454, 1582915166, 1592256487, -404232217, -404232217, 1583242790, 640034428, 2088533116, 2082874236, 2088533116, 2088502250, 1585209724, 2088533116, 2088533100, 2122057852, 2088533116, 2082875060, 640034342, 640034342, 640034344, 136718079, 100097, 2088511014, 640034342, 640034342, 841360934};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1576071570, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test25() {
		int driverSelection = 1;
		int op = 7;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 170272294, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 645660796, 2088501248, 106, 1077961054, 1583439454, 1583242846, 1583238607, 2088525350, 640034342, 640034342, 640024586, 603586560, -81583325, 656614160, 589505315, 589505315, 589307939, 594289408, 65312, 589505315, 589505523, 589505315};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test26() {
		int driverSelection = 0;
		int op = 0;
		int input = 589505315;

		int[] arrStack = {1583242846, 1583242846, 1012817502, 65536, 1583242846, 1583242986, 50331742, 1583242846, 1583242846, -2141299106, 1583242881, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242969, 1583242846, 1583242846, 1577058304, 22961758, 1583242078, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638789158, 640034342, 640034342, 637538342, 640034342, 640034342, -32768, 640034342, 640057382, 640034342, 640034342, 640034342, 572925478, 640034342, 1583242846, 1583242846};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test27() {
		int driverSelection = 0;
		int op = 8;
		int input = -2095578897;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test28() {
		int driverSelection = 0;
		int op = 0;
		int input = 1581000263;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1581000263,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test29() {
		int driverSelection = 0;
		int op = 6;
		int input = 1313754702;

		int[] arrStack = {1313754695, 1313754695};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test30() {
		int driverSelection = 1;
		int op = 2;
		int input = 1935564288;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test31() {
		int driverSelection = 1;
		int op = 7;
		int input = 1935564378;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1585340030, 1449025151, 1582227038, -664900352, 1581080158, 1583234398, 1583242847, 1583242846, 1767794782, 1579155456, 6184576, 385876062, 1583242846};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(136314879, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test32() {
		int driverSelection = 2;
		int op = 1;
		int input = 1667458262;

		int[] arrStack = {1937009006, 1730168436, 1200382273, 542077029, 1850363212, 542401907, 23686759, 1449226853, 1701060608, 1667595264};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {552076121, 1835090208};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-1115519143, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test33() {
		int driverSelection = 1;
		int op = 4;
		int input = 6580567;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {761359392, 1298494568, 1868854048, 1442840576, 6513012, 1768910368, 1098216564, 1702126948, 542143087, 1349676920, 1918987552, 1382379617, 1769081158, 1970966633, 542401907, 1953066599, 189490540, 1768842090, 539899220, 1330782336, 32, 1131375984, 1828696576, 1868850540, 151587081, 151587081, 151587081, 151587081, 151614565, 1914721123, -8388609, 1970368365, 1635017573, 175399781};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(2059853960, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test34() {
		int driverSelection = 0;
		int op = 5;
		int input = -2147483648;

		int[] arrStack = {507715588, 255, -16776961};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-16777216, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test35() {
		int driverSelection = 0;
		int op = 1;
		int input = 1852008770;

		int[] arrStack = {1701073775, 1718908672, 1970564962, 24405348, 1342534275, 1735418221, 542255984, 1696756335, 1733386605};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1733386605, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}


}
