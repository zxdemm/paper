
import org.junit.Test;
import static org.junit.Assert.assertTrue;


public class JUnitSmallest {

	@Test
	public void test() {
		Smallest a = new Smallest();
		int[] data = {1179076714, 963209272, 946304633, 1296775755, 959474288, 1869442667, 1651930486, 962797678, 543780712, 2034780747, 1278877804, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1243631178, 541738032, 943150410, 1294428778, 1785358954, 1785358954, 1785350987, 1263225675, 1263225675, 1263225675, 1263225675, 1263225675, 173759822, 543825952, 707406378, 707414082, 1248538221, 741290101, 963276911, 992424243, 909527886, 1249272692, 930428533, 1751805518, 1212827721, 1229601612, 1835691835, 1785229163, 745283688, 1769302585, 808269881, 1969909869, 1663068777, 1882942252, 1819506763, 1229475407, 1228622411, 741487412, 892745520, 943274040, 943208504, 943208504, 943208504, 943208504} ;
		int min_loc = a.Smallest(data);
		int length_data = data.length;
		for (int i = 0 ; i < length_data; i++)
			assertTrue(data[min_loc] <= data[i]);	
	}

	@Test
	public void test1() {
		Smallest a = new Smallest();
		int[] data = {};
		int min_loc = a.Smallest(data);
		int length_data = data.length;
		for (int i = 0 ; i < length_data; i++)
			assertTrue(data[min_loc] <= data[i]);		
	}

	@Test
	public void test2() {
		Smallest a = new Smallest();
		int[] data = {1430812011, 1768060263, 2032805994, 1752067435, 1818389366, 2036754294, 707275114, 1835933728, 1764259167, 1768648738, 175992680, 1848143722, 1835167593, 1881558857, 1210208298, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 690563369, 960051513, 960051497, 690563369, 690580332, 1847619436, 1835673929, 943271993, 1227902794, 1212708200, 575295344, 1969909817, 1966553392, 1966697069, 1651861304, 926493224, 690571849, 1329223976, 709380431, 977937962, 1246709588, 1447248416, 1215658343, 1768962921, 1780964202, 1530476405, 946498926, 1865231661, 757935405, 757935464, 1853061152, 1768908648, 947480686, 991983657, 690563369, 690563369, 690577195, 2105215612, 2122219134, 2122199604, 863449937, 1461789760, 592921908, 896689780, 2037738041, 673720360, 673720360, 673737577, 1430865958, 709388653, 1799056495, 992104272, 1886417008, 1966696752, 1028204619, 1011878476, 892679477, 892679477, 892679477, 808464432, 808464432, 808464432, 808464432, 808464432, 892679477, 892679477, 977029964, 1263357754, 1347758632, 692735311, 1263225916, 975658534, 640034342, 640040508, 1064005482, 1966634039, 710170965, 642271060, 926438456, 927487310, 1232105584, 1881219440, 1885349414, 641017426, 892679477, 892677898, 2066294841, 2036887145, 1886346043, 174878575, 808269880, 930706794, 809068848, 760965737, 1752786805, 1751795271, 1212828492, 978013003, 1263225675, 1263225642, 707406378, 707405390, 1430803817, 1869166955, 959473965, 812596525, 757935405, 757935435, 1263225675, 1263225675, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 1330663504, 1347440720, 1347440720, 1347440720, 1598638943, 1350262569, 1430857805, 1330412379, 1532713819, 1532713819, 1532713819, 1532710987, 1330466895, 1869573999, 1869573999, 1596534057, 1597583416, 1969909871, 1869573999, 1869573994, 963979560, 1229540156, 1348283995, 791116602, 1599023455, 1229531261, 573455686, 1195928121, 1768437816, 1735817549, 1262111545, 812281967, 1835952994, 1987409465, 1663069728, 1768908921, 1212828492, 975203436, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044938, 542001696, 1245982776, 928336461, 661285482, 1785358954, 1785358954, 1783319371, 1263216937, 690563369, 690563369, 690563369, 693458261, 1429879357, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423546, 976894522, 978670933, 1431658078, 1583242846, 1583242846, 1582650709, 1431655765, 757935405, 757935405, 757935405, 757935405, 757935405, 757945685, 1431655765, 1431655765, 1347047242, 1785358954, 1785358954, 1246382409, 1229539657, 1230317609, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 1246315074, 1111638594, 1111638594, 1111638634, 996698472, 947218792, 1785609067, 1781554477, 805978690, 1111638594, 1114336366, 1785215349, 943143216, 1768648492, 657074730, 707406378, 707406378, 757935405, 757935405, 707406378, 707406378, 707406378, 707406379, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249386, 707406378, 707406378, 707406397, 758983997, 758983997, 758983997, 758983997, 758983997, 758983997, 758983997, 758983997, 758983997, 758983210, 711945308, 1030696285, 1530617200, 993865072, 761884473, 1768648492, 1886398267, 1348219456, 1532838466, 1111638594, 1111638626, 1650614901, 1970632053, 1970632053, 1077952576, 1077952576, 1077950768, 959461680, 959461680, 959461689, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960066920, 996765546, 1864850186, 1886138474, 1802439280, 1530621290, 1969776487, 1969383271, 1966684473, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051496, 690497832, 690497832, 690497832, 690498090, 707406377, 960051513, 960051513, 960051513, 960051513, 960051513, 959130411, 724249387, 724249387, 724249387, 724249405, 960051513, 960051513, 960051513, 960051513, 1077952576, 1077952576, 1077952576, 1076570923, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249408, 1077952619, 1802190912, 1077952576, 758135096, 926299444, 858993216, 1077952553, 690563369, 690563369, 690563369, 690498084, 606348324, 606348324, 606348324, 606348324, 875112745, 690563369, 690563369, 694116191, 1600085855, 1600085855, 1600085855, 1600085855, 690563369, 690563369, 690563369, 1077952576, 1077952576, 1077952629, 1970632053, 1967671624, 943278158, 996895783, 996830523, 1349151599, 1752528245, 1970632053, 1965631785, 690563369, 690563369, 695563637, 960051513, 960051513, 961497935, 1263500107, 1330653226, 673785417, 1431272315, 2071690107, 2071690107, 2071690107, 1549556828, 2105376125, 2105376125, 2105367644, 1551596411, 2071690107, 2068469034, 673589844, 1414812756, 1414812756, 1414812756, 1414812743, 1212305210, 575295305, 173035600, 1347440720, 1347440720, 1347440720, 1349546096, 1884113742, 541740616, 1229475453, 673720360, 673720360, 673720360, 676208751, 1886088492, 540621113, 960051513, 960051513, 960051512, 926365495, 926365495, 926365495, 926365494, 943151432, 1229606715, 1280002633, 1330989607, 959920185, 1263225675, 1263225675, 1263225675, 1263225675, 1258969949, 1310747168, 539634218, 707406408, 1112173358, 1831612208, 1966697072, 1866147633, 859190859, 1313502819, 1949791542, 1969777262, 1313360456, 1229539899, 1282239087, 996829295, 1798073376, 1751741802, 959458616, 963996272, 1835212906, 1768962923, 745304952, 1263093838, 1330199370, 1261187635, 875902519, 808991032, 943208504, 943208504, 943208504, 943208504, 940202845, 1026374960, 1969894971, 1616928864, 1616928864, 1616928822, 909522486, 909522486, 538976363, 1852402287, 745759074, 1668182891, 1819832426, 544107808, 1227434108, 693127946, 1296648270, 1247103824, 544541033, 1212752442, 1262235705, 1764780395, 1869425723, 575695916, 1869441903, 1782069559, 2033678709, 943288379, 976894522, 976894522, 976894522, 976894522, 976894522, 976894568, 1212696648, 1212696648, 1212696648, 1212709981, 1532779868, 2103204715, 1817192780, 1279744327, 1344940155, 1294092873, 1110067280, 1330137160, 1212696648, 1212696648, 1212696648, 1212699978, 1112033866, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246385480, 710486613, 1229475407, 1430740550, 1381902632, 1431325261, 1229865557, 1213802581, 693136240, 1246382666, 1246382666, 1246382666, 1246382666, 1246382645, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 1245527370, 1246382666, 1246383433, 1751791920, 1532837165, 1547530272, 1818046569, 1802201963, 1802201963, 1802201963, 1795760160, 1802316846, 1819501421, 1869308787, 809054319, 1814841697, 712533864, 693123117, 962284348, 1634946680, 1852328527, 745349129, 156526697, 1931503987, 543236180, 1702065184, 1652105281, 1835627110, 1634887777, 1679838825};
		int min_loc = a.Smallest(data);
		int length_data = data.length;
		for (int i = 0 ; i < length_data; i++)
			assertTrue(data[min_loc] <= data[i]);		
	}

	@Test
	public void test3() {
		Smallest a = new Smallest();
		int[] data = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1352364800, 0, -1, 0, 1835673929, 943271993, 20298, 1212708200, 1622176512, 0, -1, -14145496, 676208751, 1886088492, 540621311, -40331, 1731737401, 707293360, 1929379840, 0, 0, 19023, 1196709443, 1109411957, 2036820336, 996802559, -42183, 930429034, 1835953965, 757935405, 757935405, 761847814, -149670785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13621, 892678192, 808464432, 808464432, 808464432, 808464432, 808465717, 892679477, 892680764, 1263291213, 1329221717, 707275082, 1297042251, 1279015463, 1579558438, 640034342, 1044135787, 1869247800, 1949772372, 1498752584, 1196701496, 1412970312, 1431193968, 1886416929, 561016928, 640034357, 642921781, 892679477, 789216041, 674855272};
		int min_loc = a.Smallest(data);
		int length_data = data.length;
		for (int i = 0 ; i < length_data; i++)
			assertTrue(data[min_loc] <= data[i]);		
	}
}



